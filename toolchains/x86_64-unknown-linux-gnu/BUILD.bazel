load("@rules_rust//rust:toolchain.bzl", "rust_toolchain")

# Host Linux x86_64 toolchain (proc-macros & build scripts run with this)
rust_toolchain(
    name = "rust_toolchain_x86_64_linux",

    # use the SAME binaries as your QNX toolchain archive (same rustc build)
    rustc         = "@rust_qnx8_toolchain//:rustc",
    cargo         = "@rust_qnx8_toolchain//:cargo",
    rust_doc      = "@rust_qnx8_toolchain//:rustdoc",
    clippy_driver = "@rust_qnx8_toolchain//:clippy_driver",
    rustc_lib     = "@rust_qnx8_toolchain//:rustc_lib",

    # host std (most Rust toolchain bundles have this; if yours exposes it, wire it)
    # You can omit rust_std here if the host std is embedded; otherwise add:
    rust_std      = "@rust_qnx8_toolchain//:rust_std-x86_64-unknown-linux-gnu",

    target_triple = "x86_64-unknown-linux-gnu",
    exec_triple   = "x86_64-unknown-linux-gnu",

    staticlib_ext = ".a",
    dylib_ext     = ".so",
    binary_ext    = "",
    default_edition = "2021",
    stdlib_linkflags = [],
)

toolchain(
    name = "toolchain_x86_64_linux",
    toolchain_type = "@rules_rust//rust:toolchain_type",
    toolchain = ":rust_toolchain_x86_64_linux",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
)
